<?php require_once '../../../tpl/header.php'; ?>

	<div class="homework1">
	<h1>Домашнее задание №1</h1>
	<?php 
		$int = 10;
		$float = 3.14;
		$bool = true;
		$str = "Hello, Mad World!";
		define("DEVIL", "666");
		$poem1 = "О мирный селянин! В твоем жилище нет";
		$poem2 = "Ни злата, ни сребра; но ты счастлив стократно:";
		$poem3 = "С любовью, с дружбой ты проводишь дни приятно,";
		$poem4 = "А в городе и шум, и пыль, и стук карет!";
	 ?>
		<div class="items item1">
			<p>1. С помощью оператора echo выводим на страницу:</p>
			<ul>
				<li>
					a. Целочисленную переменную: <?php echo $int; ?>
				</li>
				<li>
					b. Переменную дробного типа: <?php echo $float; ?>
				</li>
				<li>
					c. Переменную булевского типа: <?php echo $bool; ?>
				</li>
				<li>
					d. Строковую переменную: <?php echo $str; ?>
				</li>
				<li>
					e. Константу: <?php echo DEVIL; ?>
				</li>
			</ul>     
		</div>

		<div class="items item2">
			<p>2. Повторите вывод, заключив переменные в двойные кавычки (“). Посмотрите, что получится. Объясните результат.</p>
			<ul>
				<li>
					a. Целочисленная переменная: <?php echo "$int"; ?>
				</li>
				<li>
					b. Переменная дробного типа: <?php echo "$float"; ?>
				</li>
				<li>
					c. Переменная булевского типа: <?php echo "$bool"; ?>
				</li>
				<li>
					d. Строковая переменная: <?php echo "$str"; ?>
				</li>
				<li>
					e. Константа: <?php echo DEVIL; ?>
				</li>
			</ul>
			<p>Собственно принципиально ничего не изменилось, так как двойные кавычки позволяют подставлять вместо переменных их значения.
			Константу мы в кавычки не заключаем, ибо константа не переменная! :)</p>
		</div>

		<div class="items item3">
			<p>3. Повторите вывод, заключив переменные в одинарные кавычки (‘). Посмотрите, что получится. Объясните результат.</p>
			<ul>
				<li>
					a. Целочисленная переменная: <?php echo '$int'; ?>
				</li>
				<li>
					b. Переменная дробного типа: <?php echo '$float'; ?>
				</li>
				<li>
					c. Переменная булевского типа: <?php echo '$bool'; ?>
				</li>
				<li>
					d. Строковая переменная: <?php echo '$str'; ?>
				</li>
				<li>
					e. Константа: <?php echo DEVIL; ?>
				</li>
			</ul>
			<p>В данном случае вместо значений переменных вывелись их названия, так как все, что находится внутри одинарных кавычек
			вопринимается php как строковые значения и выводится без всяких преобразований!</p>
		</div>

		<div class="items item4">
			<p>4. Выведите на экран любое четверостишие.</p>
			<h3>РАВНОВЕСИЕ</h3>
			<?php

				echo $poem1 . "<br>";
				echo $poem2 . "<br>";
				echo $poem3 . "<br>";
				echo $poem4 . "<br>";

			 ?>
		</div>

		<div class="items item5">
			<p>5. Выполните эти же действия, с помощью одного оператора echo.</p>
			<h3>РАВНОВЕСИЕ</h3>
			<?php

				echo $poem1 . "<br>" . $poem2 . "<br>" . $poem3 . "<br>" . $poem4 . "<br>";

			 ?>
		</div>
		
		<div class="items item6">
		<h2>Продвинутый блок.</h2>
			<p>6. Попробуйте в выражении использовать разные типы данных, например, сложите число «10» и строку «20 приветов». 
			Что получится? Объясните результат.</p>
			<?php

				echo 10 + "20 приветов";

			 ?>
			<p>Когда строка вычисляется как числовое значение, результирующее значение и его тип определяются так.</p>
			<p>Строка вычисляется как float, если содержит любой из символов '.', 'e' или 'E'. Иначе она вычисляется как integer.</p>
			<p>Значение даётся по начальной части строки. Если строка начинается с правильного числового значения, 
			используется это значение. Иначе значение будет 0 (нуль). Верным числовым символом является знак с последующими 
			одной или более цифрами (с возможной десятичной точкой), с последующей необязательной экспонентой. 
			Экспонента это 'e' или 'E' с последующими одной или более цифрами.</p>
		</div>

		<div class="items item7">
			<p>7. Дайте ответ на вопрос, как работает оператор xor? В каких случаях он возвращает значение true, 
			в каких – false? Для этого напишите скрипт, который выводит значения операций со всеми возможными 
			вариантами операндов (4 варианта). Чему равно $a xor $a для любых значений $a?</p>
			<p>Сложение по модулю 2, логическое сложение, исключающее «ИЛИ», строгая дизъюнкция или же XOR: 
			 в случае 2 переменных результат выполнения операции является истинным тогда и только тогда, 
			 когда лишь один из аргументов является истинным.</p>
			 <p>
			 	Таблица истинности в нашем случае выглядит следующим образом:
				 <table>
				 	<tr>
				 		<th>a</th>
				 		<th>b</th>
				 		<th>a XOR b</th>
				 	</tr>
				 	<tr>
				 		<td>0</td>
				 		<td>0</td>
				 		<td>0</td>
				 	</tr>
				 	<tr>
				 		<td>0</td>
				 		<td>1</td>
				 		<td>1</td>
				 	</tr>
				 	<tr>
				 		<td>1</td>
				 		<td>0</td>
				 		<td>1</td>
				 	</tr>
				 	<tr>
				 		<td>1</td>
				 		<td>1</td>
				 		<td>0</td>
				 	</tr>
				 </table>

				 <?php 

				 	$a = 0;
				 	$b = 0;
				 	$c = $a ^ $b;
				 	echo "If \$a = 0 and \$b = 0, \$a XOR \$b = $c <br>";

				 	$a = 0;
				 	$b = 1;
				 	$c = $a ^ $b;
				 	echo "If \$a = 0 and \$b = 1, \$a XOR \$b = $c <br>";

				 	$a = 1;
				 	$b = 0;
				 	$c = $a ^ $b;
				 	echo "If \$a = 1 and \$b = 0, \$a XOR \$b = $c <br>";

				 	$a = 1;
				 	$b = 1;
				 	$c = $a ^ $b;
				 	echo "If \$a = 1 and \$b = 1, \$a XOR \$b = $c <br>";

				  ?>
			 </p>
		</div>

		<div class="items item8">
			<p>8. Дан фрагмент кода:
				<pre>
				&lt;?php
				  $x = 10;
				  $y = 15; 
				?&gt;
				</pre>

				Необходимо дописать несколько операций так, чтобы в итоге значения переменных
				поменялись местами. При этом, использовать другие переменные запрещается.

				<pre>
				&lt;?php
				  $x = 10;
				  $y = 15;
				  $x += $y;
				  $y = $x - $y;
				  $x -= $y;
				?&gt;
				</pre>

				<?php
					$x = 10;
					$y = 15;
					$x += $y;
					$y = $x - $y;
					$x -= $y;
					echo "So, just to show the relults \$x = $x and \$y = $y. You can try to change a numbers to check it out!";
				?>
			</p>

		</div>
	</div>

</body>
</html>